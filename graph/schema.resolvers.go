package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	"github.com/bangumi/server/graph/model"
)

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Character is the resolver for the character field.
func (r *queryResolver) Character(ctx context.Context, id int32) (*model.Character, error) {
	panic(fmt.Errorf("not implemented: Character - character"))
}

// Person is the resolver for the person field.
func (r *queryResolver) Person(ctx context.Context, id int32) (*model.Person, error) {
	panic(fmt.Errorf("not implemented: Person - person"))
}

// Subject is the resolver for the subject field.
func (r *queryResolver) Subject(ctx context.Context, id int32) (*model.Subject, error) {
	r.db.ExecContext(ctx, "select * from chii_subject WHERE id = ?", id)

	panic(fmt.Errorf("not implemented: Subject - subject"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }
type mutationResolver struct{ *Resolver }
*/
